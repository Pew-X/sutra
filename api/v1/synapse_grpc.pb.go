// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/v1/synapse.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SynapseService_Ingest_FullMethodName     = "/synapse.v1.SynapseService/Ingest"
	SynapseService_Query_FullMethodName      = "/synapse.v1.SynapseService/Query"
	SynapseService_Health_FullMethodName     = "/synapse.v1.SynapseService/Health"
	SynapseService_GetPeers_FullMethodName   = "/synapse.v1.SynapseService/GetPeers"
	SynapseService_GetMetrics_FullMethodName = "/synapse.v1.SynapseService/GetMetrics"
)

// SynapseServiceClient is the client API for SynapseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SynapseService defines the core API for the Synapse knowledge mesh.
type SynapseServiceClient interface {
	// Ingest accepts a stream of knowledge packets from scouts
	Ingest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Kpak, IngestResponse], error)
	// Query retrieves knowledge packets by subject
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Kpak], error)
	// Health check for mesh monitoring
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// GetPeers returns information about mesh members
	GetPeers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error)
	// GetMetrics returns agent performance metrics
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type synapseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynapseServiceClient(cc grpc.ClientConnInterface) SynapseServiceClient {
	return &synapseServiceClient{cc}
}

func (c *synapseServiceClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Kpak, IngestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SynapseService_ServiceDesc.Streams[0], SynapseService_Ingest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Kpak, IngestResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SynapseService_IngestClient = grpc.ClientStreamingClient[Kpak, IngestResponse]

func (c *synapseServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Kpak], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SynapseService_ServiceDesc.Streams[1], SynapseService_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, Kpak]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SynapseService_QueryClient = grpc.ServerStreamingClient[Kpak]

func (c *synapseServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SynapseService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapseServiceClient) GetPeers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeersResponse)
	err := c.cc.Invoke(ctx, SynapseService_GetPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapseServiceClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, SynapseService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynapseServiceServer is the server API for SynapseService service.
// All implementations must embed UnimplementedSynapseServiceServer
// for forward compatibility.
//
// SynapseService defines the core API for the Synapse knowledge mesh.
type SynapseServiceServer interface {
	// Ingest accepts a stream of knowledge packets from scouts
	Ingest(grpc.ClientStreamingServer[Kpak, IngestResponse]) error
	// Query retrieves knowledge packets by subject
	Query(*QueryRequest, grpc.ServerStreamingServer[Kpak]) error
	// Health check for mesh monitoring
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// GetPeers returns information about mesh members
	GetPeers(context.Context, *PeersRequest) (*PeersResponse, error)
	// GetMetrics returns agent performance metrics
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	mustEmbedUnimplementedSynapseServiceServer()
}

// UnimplementedSynapseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSynapseServiceServer struct{}

func (UnimplementedSynapseServiceServer) Ingest(grpc.ClientStreamingServer[Kpak, IngestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedSynapseServiceServer) Query(*QueryRequest, grpc.ServerStreamingServer[Kpak]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedSynapseServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSynapseServiceServer) GetPeers(context.Context, *PeersRequest) (*PeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedSynapseServiceServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedSynapseServiceServer) mustEmbedUnimplementedSynapseServiceServer() {}
func (UnimplementedSynapseServiceServer) testEmbeddedByValue()                        {}

// UnsafeSynapseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynapseServiceServer will
// result in compilation errors.
type UnsafeSynapseServiceServer interface {
	mustEmbedUnimplementedSynapseServiceServer()
}

func RegisterSynapseServiceServer(s grpc.ServiceRegistrar, srv SynapseServiceServer) {
	// If the following call pancis, it indicates UnimplementedSynapseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SynapseService_ServiceDesc, srv)
}

func _SynapseService_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SynapseServiceServer).Ingest(&grpc.GenericServerStream[Kpak, IngestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SynapseService_IngestServer = grpc.ClientStreamingServer[Kpak, IngestResponse]

func _SynapseService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynapseServiceServer).Query(m, &grpc.GenericServerStream[QueryRequest, Kpak]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SynapseService_QueryServer = grpc.ServerStreamingServer[Kpak]

func _SynapseService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapseServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapseService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapseServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapseService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapseServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapseService_GetPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapseServiceServer).GetPeers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapseService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapseServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapseService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapseServiceServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SynapseService_ServiceDesc is the grpc.ServiceDesc for SynapseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynapseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synapse.v1.SynapseService",
	HandlerType: (*SynapseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _SynapseService_Health_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _SynapseService_GetPeers_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _SynapseService_GetMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _SynapseService_Ingest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _SynapseService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/synapse.proto",
}
